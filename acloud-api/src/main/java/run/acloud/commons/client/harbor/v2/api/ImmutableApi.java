/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.acloud.commons.client.harbor.v2.api;

import com.google.gson.reflect.TypeToken;
import okhttp3.Call;
import okhttp3.Interceptor;
import okhttp3.Response;
import run.acloud.commons.client.harbor.v2.*;
import run.acloud.commons.client.harbor.v2.model.ImmutableRule;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImmutableApi {
    private HarborApiClientV2 apiClient;

    public ImmutableApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImmutableApi(HarborApiClientV2 apiClient) {
        this.apiClient = apiClient;
    }

    public HarborApiClientV2 getApiClient() {
        return apiClient;
    }

    public void setApiClient(HarborApiClientV2 apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createImmuRule
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call createImmuRuleCall(String projectNameOrId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = immutableRule;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/immutabletagrules"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call createImmuRuleValidateBeforeCall(String projectNameOrId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling createImmuRule(Async)");
        }
        
        // verify the required parameter 'immutableRule' is set
        if (immutableRule == null) {
            throw new ApiException("Missing the required parameter 'immutableRule' when calling createImmuRule(Async)");
        }
        

        Call call = createImmuRuleCall(projectNameOrId, immutableRule, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an immutable tag rule to current project
     * This endpoint add an immutable tag rule to the project 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createImmuRule(String projectNameOrId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName) throws ApiException {
        createImmuRuleWithHttpInfo(projectNameOrId, immutableRule, xRequestId, xIsResourceName);
    }

    /**
     * Add an immutable tag rule to current project
     * This endpoint add an immutable tag rule to the project 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createImmuRuleWithHttpInfo(String projectNameOrId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName) throws ApiException {
        Call call = createImmuRuleValidateBeforeCall(projectNameOrId, immutableRule, xRequestId, xIsResourceName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add an immutable tag rule to current project (asynchronously)
     * This endpoint add an immutable tag rule to the project 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call createImmuRuleAsync(String projectNameOrId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = createImmuRuleValidateBeforeCall(projectNameOrId, immutableRule, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteImmuRule
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call deleteImmuRuleCall(String projectNameOrId, Long immutableRuleId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "immutable_rule_id" + "\\}", apiClient.escapeString(immutableRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call deleteImmuRuleValidateBeforeCall(String projectNameOrId, Long immutableRuleId, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling deleteImmuRule(Async)");
        }
        
        // verify the required parameter 'immutableRuleId' is set
        if (immutableRuleId == null) {
            throw new ApiException("Missing the required parameter 'immutableRuleId' when calling deleteImmuRule(Async)");
        }
        

        Call call = deleteImmuRuleCall(projectNameOrId, immutableRuleId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the immutable tag rule.
     * 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteImmuRule(String projectNameOrId, Long immutableRuleId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        deleteImmuRuleWithHttpInfo(projectNameOrId, immutableRuleId, xRequestId, xIsResourceName);
    }

    /**
     * Delete the immutable tag rule.
     * 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteImmuRuleWithHttpInfo(String projectNameOrId, Long immutableRuleId, String xRequestId, Boolean xIsResourceName) throws ApiException {
        Call call = deleteImmuRuleValidateBeforeCall(projectNameOrId, immutableRuleId, xRequestId, xIsResourceName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the immutable tag rule. (asynchronously)
     * 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call deleteImmuRuleAsync(String projectNameOrId, Long immutableRuleId, String xRequestId, Boolean xIsResourceName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = deleteImmuRuleValidateBeforeCall(projectNameOrId, immutableRuleId, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listImmuRules
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call listImmuRulesCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/immutabletagrules"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call listImmuRulesValidateBeforeCall(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling listImmuRules(Async)");
        }
        

        Call call = listImmuRulesCall(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all immutable tag rules of current project
     * This endpoint returns the immutable tag rules of a project 
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @return List&lt;ImmutableRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ImmutableRule> listImmuRules(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort) throws ApiException {
        ApiResponse<List<ImmutableRule>> resp = listImmuRulesWithHttpInfo(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort);
        return resp.getData();
    }

    /**
     * List all immutable tag rules of current project
     * This endpoint returns the immutable tag rules of a project 
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @return ApiResponse&lt;List&lt;ImmutableRule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ImmutableRule>> listImmuRulesWithHttpInfo(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort) throws ApiException {
        Call call = listImmuRulesValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ImmutableRule>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all immutable tag rules of current project (asynchronously)
     * This endpoint returns the immutable tag rules of a project 
     * @param projectNameOrId The name or id of the project (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call listImmuRulesAsync(String projectNameOrId, String xRequestId, Boolean xIsResourceName, Long page, Long pageSize, String q, String sort, final ApiCallback<List<ImmutableRule>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = listImmuRulesValidateBeforeCall(projectNameOrId, xRequestId, xIsResourceName, page, pageSize, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ImmutableRule>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateImmuRule
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call updateImmuRuleCall(String projectNameOrId, Long immutableRuleId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = immutableRule;

        // create path and map variables
        String localVarPath = "/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}"
            .replaceAll("\\{" + "project_name_or_id" + "\\}", apiClient.escapeString(projectNameOrId.toString()))
            .replaceAll("\\{" + "immutable_rule_id" + "\\}", apiClient.escapeString(immutableRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));
        if (xIsResourceName != null)
        localVarHeaderParams.put("X-Is-Resource-Name", apiClient.parameterToString(xIsResourceName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call updateImmuRuleValidateBeforeCall(String projectNameOrId, Long immutableRuleId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectNameOrId' is set
        if (projectNameOrId == null) {
            throw new ApiException("Missing the required parameter 'projectNameOrId' when calling updateImmuRule(Async)");
        }
        
        // verify the required parameter 'immutableRuleId' is set
        if (immutableRuleId == null) {
            throw new ApiException("Missing the required parameter 'immutableRuleId' when calling updateImmuRule(Async)");
        }
        
        // verify the required parameter 'immutableRule' is set
        if (immutableRule == null) {
            throw new ApiException("Missing the required parameter 'immutableRule' when calling updateImmuRule(Async)");
        }
        

        Call call = updateImmuRuleCall(projectNameOrId, immutableRuleId, immutableRule, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the immutable tag rule or enable or disable the rule
     * 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateImmuRule(String projectNameOrId, Long immutableRuleId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName) throws ApiException {
        updateImmuRuleWithHttpInfo(projectNameOrId, immutableRuleId, immutableRule, xRequestId, xIsResourceName);
    }

    /**
     * Update the immutable tag rule or enable or disable the rule
     * 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateImmuRuleWithHttpInfo(String projectNameOrId, Long immutableRuleId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName) throws ApiException {
        Call call = updateImmuRuleValidateBeforeCall(projectNameOrId, immutableRuleId, immutableRule, xRequestId, xIsResourceName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the immutable tag rule or enable or disable the rule (asynchronously)
     * 
     * @param projectNameOrId The name or id of the project (required)
     * @param immutableRuleId The ID of the immutable rule (required)
     * @param immutableRule  (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call updateImmuRuleAsync(String projectNameOrId, Long immutableRuleId, ImmutableRule immutableRule, String xRequestId, Boolean xIsResourceName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = updateImmuRuleValidateBeforeCall(projectNameOrId, immutableRuleId, immutableRule, xRequestId, xIsResourceName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
