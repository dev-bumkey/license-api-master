/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.acloud.commons.client.harbor.v2.api;

import com.google.gson.reflect.TypeToken;
import okhttp3.Call;
import okhttp3.Interceptor;
import okhttp3.Response;
import run.acloud.commons.client.harbor.v2.*;
import run.acloud.commons.client.harbor.v2.model.Robot;
import run.acloud.commons.client.harbor.v2.model.RobotCreate;
import run.acloud.commons.client.harbor.v2.model.RobotCreated;
import run.acloud.commons.client.harbor.v2.model.RobotSec;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RobotApi {
    private HarborApiClientV2 apiClient;

    public RobotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RobotApi(HarborApiClientV2 apiClient) {
        this.apiClient = apiClient;
    }

    public HarborApiClientV2 getApiClient() {
        return apiClient;
    }

    public void setApiClient(HarborApiClientV2 apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRobot
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call createRobotCall(RobotCreate robot, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/robots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call createRobotValidateBeforeCall(RobotCreate robot, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling createRobot(Async)");
        }
        

        Call call = createRobotCall(robot, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a robot account
     * Create a robot account
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return RobotCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotCreated createRobot(RobotCreate robot, String xRequestId) throws ApiException {
        ApiResponse<RobotCreated> resp = createRobotWithHttpInfo(robot, xRequestId);
        return resp.getData();
    }

    /**
     * Create a robot account
     * Create a robot account
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;RobotCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotCreated> createRobotWithHttpInfo(RobotCreate robot, String xRequestId) throws ApiException {
        Call call = createRobotValidateBeforeCall(robot, xRequestId, null, null);
        Type localVarReturnType = new TypeToken<RobotCreated>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a robot account (asynchronously)
     * Create a robot account
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call createRobotAsync(RobotCreate robot, String xRequestId, final ApiCallback<RobotCreated> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = createRobotValidateBeforeCall(robot, xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotCreated>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRobot
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call deleteRobotCall(Integer robotId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/robots/{robot_id}"
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call deleteRobotValidateBeforeCall(Integer robotId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling deleteRobot(Async)");
        }
        

        Call call = deleteRobotCall(robotId, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a robot account
     * This endpoint deletes specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRobot(Integer robotId, String xRequestId) throws ApiException {
        deleteRobotWithHttpInfo(robotId, xRequestId);
    }

    /**
     * Delete a robot account
     * This endpoint deletes specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRobotWithHttpInfo(Integer robotId, String xRequestId) throws ApiException {
        Call call = deleteRobotValidateBeforeCall(robotId, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a robot account (asynchronously)
     * This endpoint deletes specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call deleteRobotAsync(Integer robotId, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = deleteRobotValidateBeforeCall(robotId, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRobotByID
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call getRobotByIDCall(Integer robotId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/robots/{robot_id}"
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call getRobotByIDValidateBeforeCall(Integer robotId, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling getRobotByID(Async)");
        }
        

        Call call = getRobotByIDCall(robotId, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a robot account
     * This endpoint returns specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot getRobotByID(Integer robotId, String xRequestId) throws ApiException {
        ApiResponse<Robot> resp = getRobotByIDWithHttpInfo(robotId, xRequestId);
        return resp.getData();
    }

    /**
     * Get a robot account
     * This endpoint returns specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> getRobotByIDWithHttpInfo(Integer robotId, String xRequestId) throws ApiException {
        Call call = getRobotByIDValidateBeforeCall(robotId, xRequestId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a robot account (asynchronously)
     * This endpoint returns specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call getRobotByIDAsync(Integer robotId, String xRequestId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = getRobotByIDValidateBeforeCall(robotId, xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listRobot
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call listRobotCall(String xRequestId, String q, String sort, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/robots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call listRobotValidateBeforeCall(String xRequestId, String q, String sort, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        Call call = listRobotCall(xRequestId, q, sort, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get robot account
     * List the robot accounts with the specified level and project.
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return List&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Robot> listRobot(String xRequestId, String q, String sort, Long page, Long pageSize) throws ApiException {
        ApiResponse<List<Robot>> resp = listRobotWithHttpInfo(xRequestId, q, sort, page, pageSize);
        return resp.getData();
    }

    /**
     * Get robot account
     * List the robot accounts with the specified level and project.
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @return ApiResponse&lt;List&lt;Robot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Robot>> listRobotWithHttpInfo(String xRequestId, String q, String sort, Long page, Long pageSize) throws ApiException {
        Call call = listRobotValidateBeforeCall(xRequestId, q, sort, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Robot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get robot account (asynchronously)
     * List the robot accounts with the specified level and project.
     * @param xRequestId An unique ID for the request (optional)
     * @param q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max] (optional)
     * @param sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot; (optional)
     * @param page The page number (optional, default to 1)
     * @param pageSize The size of per page (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call listRobotAsync(String xRequestId, String q, String sort, Long page, Long pageSize, final ApiCallback<List<Robot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = listRobotValidateBeforeCall(xRequestId, q, sort, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Robot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refreshSec
     * @param robotId Robot ID (required)
     * @param robotSec The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call refreshSecCall(Integer robotId, RobotSec robotSec, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robotSec;

        // create path and map variables
        String localVarPath = "/robots/{robot_id}"
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call refreshSecValidateBeforeCall(Integer robotId, RobotSec robotSec, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling refreshSec(Async)");
        }
        
        // verify the required parameter 'robotSec' is set
        if (robotSec == null) {
            throw new ApiException("Missing the required parameter 'robotSec' when calling refreshSec(Async)");
        }
        

        Call call = refreshSecCall(robotId, robotSec, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Refresh the robot secret
     * Refresh the robot secret
     * @param robotId Robot ID (required)
     * @param robotSec The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return RobotSec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotSec refreshSec(Integer robotId, RobotSec robotSec, String xRequestId) throws ApiException {
        ApiResponse<RobotSec> resp = refreshSecWithHttpInfo(robotId, robotSec, xRequestId);
        return resp.getData();
    }

    /**
     * Refresh the robot secret
     * Refresh the robot secret
     * @param robotId Robot ID (required)
     * @param robotSec The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;RobotSec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotSec> refreshSecWithHttpInfo(Integer robotId, RobotSec robotSec, String xRequestId) throws ApiException {
        Call call = refreshSecValidateBeforeCall(robotId, robotSec, xRequestId, null, null);
        Type localVarReturnType = new TypeToken<RobotSec>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Refresh the robot secret (asynchronously)
     * Refresh the robot secret
     * @param robotId Robot ID (required)
     * @param robotSec The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call refreshSecAsync(Integer robotId, RobotSec robotSec, String xRequestId, final ApiCallback<RobotSec> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = refreshSecValidateBeforeCall(robotId, robotSec, xRequestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotSec>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRobot
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public Call updateRobotCall(Integer robotId, Robot robot, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/robots/{robot_id}"
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestId != null)
        localVarHeaderParams.put("X-Request-Id", apiClient.parameterToString(xRequestId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private Call updateRobotValidateBeforeCall(Integer robotId, Robot robot, String xRequestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling updateRobot(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling updateRobot(Async)");
        }
        

        Call call = updateRobotCall(robotId, robot, xRequestId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a robot account
     * This endpoint updates specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRobot(Integer robotId, Robot robot, String xRequestId) throws ApiException {
        updateRobotWithHttpInfo(robotId, robot, xRequestId);
    }

    /**
     * Update a robot account
     * This endpoint updates specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRobotWithHttpInfo(Integer robotId, Robot robot, String xRequestId) throws ApiException {
        Call call = updateRobotValidateBeforeCall(robotId, robot, xRequestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a robot account (asynchronously)
     * This endpoint updates specific robot account information by robot ID.
     * @param robotId Robot ID (required)
     * @param robot The JSON object of a robot account. (required)
     * @param xRequestId An unique ID for the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call updateRobotAsync(Integer robotId, Robot robot, String xRequestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = updateRobotValidateBeforeCall(robotId, robot, xRequestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
