/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.acloud.commons.client.harbor.v1.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;


@Schema(description = "The detailed information of the chart entry")
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-08T09:10:54.107Z")
public class ChartVersionDetails {
  @SerializedName("metadata")
  private ChartVersion metadata = null;

  @SerializedName("security")
  private SecurityReport security = null;

  @SerializedName("dependencies")
  private List<Dependency> dependencies = null;

  @SerializedName("values")
  private Map<String, Object> values = null;

  @SerializedName("files")
  private Map<String, String> files = null;

  @SerializedName("labels")
  private Labels labels = null;

  public ChartVersionDetails metadata(ChartVersion metadata) {
    this.metadata = metadata;
    return this;
  }


  @Schema(description = "")
  public ChartVersion getMetadata() {
    return metadata;
  }

  public void setMetadata(ChartVersion metadata) {
    this.metadata = metadata;
  }

  public ChartVersionDetails security(SecurityReport security) {
    this.security = security;
    return this;
  }


  @Schema(description = "")
  public SecurityReport getSecurity() {
    return security;
  }

  public void setSecurity(SecurityReport security) {
    this.security = security;
  }

  public ChartVersionDetails dependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public ChartVersionDetails addDependenciesItem(Dependency dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<Dependency>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }


  @Schema(description = "")
  public List<Dependency> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
  }

  public ChartVersionDetails values(Map<String, Object> values) {
    this.values = values;
    return this;
  }

  public ChartVersionDetails putValuesItem(String key, Object valuesItem) {
    if (this.values == null) {
      this.values = new HashMap<String, Object>();
    }
    this.values.put(key, valuesItem);
    return this;
  }


  @Schema(description = "")
  public Map<String, Object> getValues() {
    return values;
  }

  public void setValues(Map<String, Object> values) {
    this.values = values;
  }

  public ChartVersionDetails files(Map<String, String> files) {
    this.files = files;
    return this;
  }

  public ChartVersionDetails putFilesItem(String key, String filesItem) {
    if (this.files == null) {
      this.files = new HashMap<String, String>();
    }
    this.files.put(key, filesItem);
    return this;
  }


  @Schema(description = "")
  public Map<String, String> getFiles() {
    return files;
  }

  public void setFiles(Map<String, String> files) {
    this.files = files;
  }

  public ChartVersionDetails labels(Labels labels) {
    this.labels = labels;
    return this;
  }


  @Schema(description = "")
  public Labels getLabels() {
    return labels;
  }

  public void setLabels(Labels labels) {
    this.labels = labels;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartVersionDetails chartVersionDetails = (ChartVersionDetails) o;
    return Objects.equals(this.metadata, chartVersionDetails.metadata) &&
        Objects.equals(this.security, chartVersionDetails.security) &&
        Objects.equals(this.dependencies, chartVersionDetails.dependencies) &&
        Objects.equals(this.values, chartVersionDetails.values) &&
        Objects.equals(this.files, chartVersionDetails.files) &&
        Objects.equals(this.labels, chartVersionDetails.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, security, dependencies, values, files, labels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartVersionDetails {\n");
    
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }


  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

