/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.acloud.commons.client.harbor.v2.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * ScannerRegistrationSettings
 */
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-06-22T08:06:19.711Z")
public class ScannerRegistrationSettings {
  @SerializedName("name")
  private String name = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("auth")
  private String auth = "";

  @SerializedName("access_credential")
  private String accessCredential = null;

  public ScannerRegistrationSettings name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this registration
   * @return name
  **/
  @Schema(example = "Trivy", required = true, description = "The name of this registration")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ScannerRegistrationSettings url(String url) {
    this.url = url;
    return this;
  }

   /**
   * A base URL of the scanner adapter.
   * @return url
  **/
  @Schema(example = "http://harbor-scanner-trivy:8080", required = true, description = "A base URL of the scanner adapter.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ScannerRegistrationSettings auth(String auth) {
    this.auth = auth;
    return this;
  }

   /**
   * Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\&quot;, \&quot;Bearer\&quot; and api key header \&quot;X-ScannerAdapter-API-Key\&quot; 
   * @return auth
  **/
  @Schema(description = "Specify what authentication approach is adopted for the HTTP communications. Supported types Basic', 'Bearer' and api key header 'X-ScannerAdapter-API-Key' ")
  public String getAuth() {
    return auth;
  }

  public void setAuth(String auth) {
    this.auth = auth;
  }

  public ScannerRegistrationSettings accessCredential(String accessCredential) {
    this.accessCredential = accessCredential;
    return this;
  }

   /**
   * An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. 
   * @return accessCredential
  **/
  @Schema(example = "Bearer: JWTTOKENGOESHERE", description = "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. ")
  public String getAccessCredential() {
    return accessCredential;
  }

  public void setAccessCredential(String accessCredential) {
    this.accessCredential = accessCredential;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScannerRegistrationSettings scannerRegistrationSettings = (ScannerRegistrationSettings) o;
    return Objects.equals(this.name, scannerRegistrationSettings.name) &&
        Objects.equals(this.url, scannerRegistrationSettings.url) &&
        Objects.equals(this.auth, scannerRegistrationSettings.auth) &&
        Objects.equals(this.accessCredential, scannerRegistrationSettings.accessCredential);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, url, auth, accessCredential);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScannerRegistrationSettings {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    accessCredential: ").append(toIndentedString(accessCredential)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

