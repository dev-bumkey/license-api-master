/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.acloud.commons.client.harbor.v2.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Platform
 */
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-06-22T08:06:19.711Z")
public class Platform {
  @SerializedName("architecture")
  private String architecture = null;

  @SerializedName("os")
  private String os = null;

  @SerializedName("&#39;os.version&#39;")
  private String osVersion = null;

  @SerializedName("&#39;os.features&#39;")
  private List<String> osFeatures = null;

  @SerializedName("variant")
  private String variant = null;

  public Platform architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

   /**
   * The architecture that the artifact applys to
   * @return architecture
  **/
  @Schema(description = "The architecture that the artifact applys to")
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }

  public Platform os(String os) {
    this.os = os;
    return this;
  }

   /**
   * The OS that the artifact applys to
   * @return os
  **/
  @Schema(description = "The OS that the artifact applys to")
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }

  public Platform osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

   /**
   * The version of the OS that the artifact applys to
   * @return osVersion
  **/
  @Schema(description = "The version of the OS that the artifact applys to")
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }

  public Platform osFeatures(List<String> osFeatures) {
    this.osFeatures = osFeatures;
    return this;
  }

  public Platform addOsFeaturesItem(String osFeaturesItem) {
    if (this.osFeatures == null) {
      this.osFeatures = new ArrayList<String>();
    }
    this.osFeatures.add(osFeaturesItem);
    return this;
  }

   /**
   * The features of the OS that the artifact applys to
   * @return osFeatures
  **/
  @Schema(description = "The features of the OS that the artifact applys to")
  public List<String> getOsFeatures() {
    return osFeatures;
  }

  public void setOsFeatures(List<String> osFeatures) {
    this.osFeatures = osFeatures;
  }

  public Platform variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * The variant of the CPU
   * @return variant
  **/
  @Schema(description = "The variant of the CPU")
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Platform platform = (Platform) o;
    return Objects.equals(this.architecture, platform.architecture) &&
        Objects.equals(this.os, platform.os) &&
        Objects.equals(this.osVersion, platform.osVersion) &&
        Objects.equals(this.osFeatures, platform.osFeatures) &&
        Objects.equals(this.variant, platform.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, os, osVersion, osFeatures, variant);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Platform {\n");
    
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    osFeatures: ").append(toIndentedString(osFeatures)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

